#!/usr/bin/env bash

set -euo pipefail

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TEMPLATE_DIR=".template"
CONTINUE_SEARCH_MARKER='$CONTINUE_SEARCH_MARKER' # if this file is found in a .template directory, it's a sign that we  should continue searching for .template folders in parent folders. But if it is not found in a .template directory, the search ends

# Check if problem name is provided
if [ -z "${1:-}" ]; then
  echo "‚ùå Error: You must provide a problem name."
  echo "Usage: make_prob <problem_name>"
  exit 1
fi

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Search upwards for directory containing .template
search_up() (
  while [[ "$PWD" != "/" ]]; do
    if [[ -e "$1" ]]; then
      pwd
      if [[ ! -e "$1/$2" ]]; then
        break
      fi
    fi
    cd ..
  done
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Find all template directories up the tree
IFS=$'\n'
TEMPLATE_DIRS=($(search_up "$TEMPLATE_DIR" "$CONTINUE_SEARCH_MARKER" | tac))
unset IFS

if [[ "${#TEMPLATE_DIRS[@]}" -eq 0 ]]; then
  echo "‚ùå Error: Could not find any directory containing '$TEMPLATE_DIR'"
  exit 1
fi

TEMPLATE_DIRS=("${TEMPLATE_DIRS[@]/%//${TEMPLATE_DIR}}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Determine rename command
if hash rename.ul 2>/dev/null; then
  RENAME="rename.ul"
else
  RENAME="rename"
fi

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Process all given folder names
for filepath in "$@"; do
  if [[ -z "$filepath" ]]; then
    echo "‚ö†Ô∏è Skipping empty argument"
    continue
  fi

  PROBLEM_NAME="$(basename "$filepath")"

  if [[ -e "$filepath" ]]; then
    echo "‚ö†Ô∏è  $filepath already exists. Remove it and retry."
    continue
  fi

  echo "üìÅ Creating problem: $PROBLEM_NAME"

  mkdir -p "$filepath"

  # Copy template contents
  for CURRENT_TEMPLATE_DIR in "${TEMPLATE_DIRS[@]}"; do
    if [[ -d "$CURRENT_TEMPLATE_DIR" ]]; then
      cp -rTL "$CURRENT_TEMPLATE_DIR" "$filepath/"
    else
      echo "‚ö†Ô∏è Skipping non-directory: $CURRENT_TEMPLATE_DIR"
    fi
  done

  # Copy files in
  mkdir -p "$filepath"
  for CURRENT_TEMPLATE_DIR in "${TEMPLATE_DIRS[@]}"; do
    # -r -> To recursively copy a directory
    # -T -> To directly copy the contents of $CURRENT_TEMPLATE_DIR into $filepath instead of adding the top level directory
    # -L -> To follow $CURRENT_TEMPLATE_DIR if it's a symbolic link
    cp -rTL "$CURRENT_TEMPLATE_DIR" "$filepath/"
  done

  # Remove the search marker if present
  rm -f "$filepath/$CONTINUE_SEARCH_MARKER"

  # Rename files that include $PROBLEM_NAME
  find "$filepath" -type f -print0 | xargs -0 "$RENAME" "\$PROBLEM_NAME" "$PROBLEM_NAME" 2>/dev/null || true

  # Envsubst PROBLEM_NAME in files
  export PROBLEM_NAME
  REPLACE_STRING='${PROBLEM_NAME}'
  find $filepath -type f -print0 | xargs -0 -I{} bash -c 'TEMP=$(mktemp) && cat "$1" > "$TEMP" && envsubst '"'$REPLACE_STRING'"' < "$TEMP" > "$1" && rm "$TEMP"' \
    -- {}

  # Run optional setup
  pushd "$filepath" >/dev/null
  if [[ -x "./setup" ]]; then
    echo "‚öôÔ∏è Running setup..."
    ./setup
  fi
  popd >/dev/null

  echo "‚úÖ Done: $filepath"
done
